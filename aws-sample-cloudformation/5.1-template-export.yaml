# pre-requisite to run this lambda function is 
# 1. one bucket at the same region where you are running this lambda

# this cloudformation demostrates how to creating role and policy resources, passing resource values to each other
# creating policy and passing policy ARN to role and attaching already created policy role
# after creating role its passing its ARN in key/variable which will be used in another cloudformation ie 5.2-template-import
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - tst
    - prod
Resources:
  s3policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: s3-getobject-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectAcl
          Resource: arn:aws:s3:::messaging-bucket-app/*
  RoleForLambdaFunction:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      ManagedPolicyArns:
         - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
         - !Ref s3policy
      RoleName: RoleForLambda
    # dependson property is used to define sequence for the creation of resources
    # here RoleForLambdaFunction is dependson s3policy whch means RoleARNForLambdaFunction resource will get created 
    # after creating s3policy resource   
    DependsOn: s3policy
Outputs:
  # this is key/variable name
  RoleARNForLambdaFunction:
    Description: The ARN of the sample lambda
    # this is the value assigned to the variable
    Value: !GetAtt RoleForLambdaFunction.Arn     